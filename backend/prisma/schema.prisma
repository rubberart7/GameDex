// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  fullName              String
  email                 String                  @unique
  password              String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  refreshTokens         RefreshToken[]          // Relation to RefreshToken model
  wishlist              Wishlist[]              // Relation to Wishlist model
  library               UserGameLibrary[]       // Relation to UserGame (Library) model
  recommendationCache   UserRecommendationCache? // Relation to UserRecommendationCache model
}

// Your existing RefreshToken model (assuming this is already defined)
model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// The lean Game Model, holding only essential data from RAWG for display lists
model Game {
  id               Int                 @id @default(autoincrement()) // Internal primary key for your database
  rawgId           Int                 @unique                       // The actual ID from the RAWG API
  name             String
  background_image String?                                           // Optional, as not all games might have this
  rating           Float?                                            // Optional
  released         String?                                           // Optional

  // Relations to your collection models
  wishlist         Wishlist[]
  library          UserGameLibrary[]

  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

// Model for a user's Wishlist entries
model Wishlist {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  gameId      Int      // Links to the 'id' of your local 'Game' model
  game        Game     @relation(fields: [gameId], references: [id])
  targetPrice Float?   // Optional: For future deal alerts
  addedAt     DateTime @default(now())

  @@unique([userId, gameId]) // Ensures a user can't add the same game multiple times to their wishlist
}

// Model for a user's Game Library entries (games they "own")
model UserGameLibrary {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  gameId    Int      // Links to the 'id' of your local 'Game' model
  game      Game     @relation(fields: [gameId], references: [id])
  status    String   @default("owned") // Example: "owned", "played", "completed"
  addedAt   DateTime @default(now())

  @@unique([userId, gameId]) // Ensures a user can't add the same game multiple times to their library
}

// NEW MODEL FOR CACHED RECOMMENDATIONS
model UserRecommendationCache {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  cachedAt       DateTime @default(now())
  recommendations Json     // Store the array of recommendations as JSON
  collectionHash String   // A hash representing the state of the user's library and wishlist

  user           User     @relation(fields: [userId], references: [id])
}